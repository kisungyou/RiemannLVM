// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rglpm_loglkd
double rglpm_loglkd(arma::mat& A, const double tau, const double sig2, arma::mat& D);
RcppExport SEXP _RiemannLVM_rglpm_loglkd(SEXP ASEXP, SEXP tauSEXP, SEXP sig2SEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(rglpm_loglkd(A, tau, sig2, D));
    return rcpp_result_gen;
END_RCPP
}
// aux_equalstr
bool aux_equalstr(std::string string1, std::string string2);
RcppExport SEXP _RiemannLVM_aux_equalstr(SEXP string1SEXP, SEXP string2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type string1(string1SEXP);
    Rcpp::traits::input_parameter< std::string >::type string2(string2SEXP);
    rcpp_result_gen = Rcpp::wrap(aux_equalstr(string1, string2));
    return rcpp_result_gen;
END_RCPP
}
// spherical_log
arma::rowvec spherical_log(arma::rowvec x, arma::rowvec y);
RcppExport SEXP _RiemannLVM_spherical_log(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(spherical_log(x, y));
    return rcpp_result_gen;
END_RCPP
}
// spherical_exp
arma::rowvec spherical_exp(arma::rowvec x, arma::rowvec u, double t);
RcppExport SEXP _RiemannLVM_spherical_exp(SEXP xSEXP, SEXP uSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(spherical_exp(x, u, t));
    return rcpp_result_gen;
END_RCPP
}
// hyperbolic_log
arma::rowvec hyperbolic_log(arma::rowvec x, arma::rowvec y);
RcppExport SEXP _RiemannLVM_hyperbolic_log(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(hyperbolic_log(x, y));
    return rcpp_result_gen;
END_RCPP
}
// hyperbolic_exp
arma::rowvec hyperbolic_exp(arma::rowvec x, arma::rowvec u, double t);
RcppExport SEXP _RiemannLVM_hyperbolic_exp(SEXP xSEXP, SEXP uSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(hyperbolic_exp(x, u, t));
    return rcpp_result_gen;
END_RCPP
}
// aux_pdist
arma::mat aux_pdist(arma::mat& X, std::string geometry);
RcppExport SEXP _RiemannLVM_aux_pdist(SEXP XSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type geometry(geometrySEXP);
    rcpp_result_gen = Rcpp::wrap(aux_pdist(X, geometry));
    return rcpp_result_gen;
END_RCPP
}
// aux_pdist2
arma::mat aux_pdist2(arma::mat& X, arma::mat& Y, std::string geometry);
RcppExport SEXP _RiemannLVM_aux_pdist2(SEXP XSEXP, SEXP YSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< std::string >::type geometry(geometrySEXP);
    rcpp_result_gen = Rcpp::wrap(aux_pdist2(X, Y, geometry));
    return rcpp_result_gen;
END_RCPP
}
// aux_distVec2Mat
arma::vec aux_distVec2Mat(arma::rowvec x, arma::mat Y, std::string geometry);
RcppExport SEXP _RiemannLVM_aux_distVec2Mat(SEXP xSEXP, SEXP YSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< std::string >::type geometry(geometrySEXP);
    rcpp_result_gen = Rcpp::wrap(aux_distVec2Mat(x, Y, geometry));
    return rcpp_result_gen;
END_RCPP
}
// aux_initembed
arma::mat aux_initembed(int n, int p, std::string geometry, double sd);
RcppExport SEXP _RiemannLVM_aux_initembed(SEXP nSEXP, SEXP pSEXP, SEXP geometrySEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::string >::type geometry(geometrySEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(aux_initembed(n, p, geometry, sd));
    return rcpp_result_gen;
END_RCPP
}
// src_germ
arma::mat src_germ(arma::mat& D, int p, std::string geometry, int iter_outer, int iter_inner, double tol_outer, double tol_inner, bool exact_search, double learning_rate, double weight_order);
RcppExport SEXP _RiemannLVM_src_germ(SEXP DSEXP, SEXP pSEXP, SEXP geometrySEXP, SEXP iter_outerSEXP, SEXP iter_innerSEXP, SEXP tol_outerSEXP, SEXP tol_innerSEXP, SEXP exact_searchSEXP, SEXP learning_rateSEXP, SEXP weight_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::string >::type geometry(geometrySEXP);
    Rcpp::traits::input_parameter< int >::type iter_outer(iter_outerSEXP);
    Rcpp::traits::input_parameter< int >::type iter_inner(iter_innerSEXP);
    Rcpp::traits::input_parameter< double >::type tol_outer(tol_outerSEXP);
    Rcpp::traits::input_parameter< double >::type tol_inner(tol_innerSEXP);
    Rcpp::traits::input_parameter< bool >::type exact_search(exact_searchSEXP);
    Rcpp::traits::input_parameter< double >::type learning_rate(learning_rateSEXP);
    Rcpp::traits::input_parameter< double >::type weight_order(weight_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(src_germ(D, p, geometry, iter_outer, iter_inner, tol_outer, tol_inner, exact_search, learning_rate, weight_order));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RiemannLVM_rglpm_loglkd", (DL_FUNC) &_RiemannLVM_rglpm_loglkd, 4},
    {"_RiemannLVM_aux_equalstr", (DL_FUNC) &_RiemannLVM_aux_equalstr, 2},
    {"_RiemannLVM_spherical_log", (DL_FUNC) &_RiemannLVM_spherical_log, 2},
    {"_RiemannLVM_spherical_exp", (DL_FUNC) &_RiemannLVM_spherical_exp, 3},
    {"_RiemannLVM_hyperbolic_log", (DL_FUNC) &_RiemannLVM_hyperbolic_log, 2},
    {"_RiemannLVM_hyperbolic_exp", (DL_FUNC) &_RiemannLVM_hyperbolic_exp, 3},
    {"_RiemannLVM_aux_pdist", (DL_FUNC) &_RiemannLVM_aux_pdist, 2},
    {"_RiemannLVM_aux_pdist2", (DL_FUNC) &_RiemannLVM_aux_pdist2, 3},
    {"_RiemannLVM_aux_distVec2Mat", (DL_FUNC) &_RiemannLVM_aux_distVec2Mat, 3},
    {"_RiemannLVM_aux_initembed", (DL_FUNC) &_RiemannLVM_aux_initembed, 4},
    {"_RiemannLVM_src_germ", (DL_FUNC) &_RiemannLVM_src_germ, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_RiemannLVM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
